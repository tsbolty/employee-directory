{"version":3,"sources":["utils/API.js","components/SearchForm.js","components/ResultList.js","components/GenerateList.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchForm","props","className","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","ResultList","onClick","nameArray","results","map","phone","email","dob","login","picture","first","toLowerCase","includes","key","uuid","src","thumbnail","alt","last","date","slice","GenerateList","state","order","apiCall","API","then","res","setState","data","catch","err","console","log","event","target","sorted","sort","a","b","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8UAEe,EACH,WACJ,OAAOA,IAAMC,IAAI,2CCiBVC,MAnBf,SAAoBC,GAClB,OACE,8BACE,yBAAKC,UAAU,cACb,2BAAOC,QAAQ,UAAf,WACA,2BACEC,SAAUH,EAAMI,kBAChBC,MAAOL,EAAMM,OACbC,KAAK,SACLC,KAAK,OACLP,UAAU,eACVQ,YAAY,yBACZC,GAAG,cC6BEC,MAxCf,SAAoBX,GAClB,OACE,+BACE,+BACE,4BACE,6BACA,wBAAIY,QAAW,kBAAKZ,EAAMa,cAA1B,QACA,4CACA,qCACA,+CAGJ,2BAAOZ,UAAU,cACdD,EAAMc,QAAQC,KAAI,YAAgD,IAA9CR,EAA6C,EAA7CA,KAAMS,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACnD,GAAGb,EAAKc,MAAMC,cAAcC,SAASvB,EAAMM,QAC3C,OACA,wBAAIL,UAAU,kBAAkBuB,IAAKL,EAAMM,MACzC,4BACE,yBAAKC,IAAKN,EAAQO,UAAWC,IAAI,MAEnC,4BACGrB,EAAKc,MADR,IACgBd,EAAKsB,MAErB,4BACGb,GAEH,4BACGC,GAEH,4BACGC,EAAIY,KAAKC,MAAM,EAAG,YCqBlBC,E,4MA/CXC,MAAQ,CACJ3B,OAAQ,GACRQ,QAAS,GACToB,MAAO,W,EAOXC,QAAU,WACNC,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEzB,QAASwB,EAAIE,KAAK1B,aAC9C2B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAGhCtC,kBAAoB,SAAAyC,GAChB,IAAMvC,EAASuC,EAAMC,OAAOvC,KACtBF,EAAQwC,EAAMC,OAAOzC,MAC3B,EAAKkC,SAAL,eACCjC,EAASD,K,EAIdQ,UAAY,WACR,IAAMkC,EAAS,YAAK,EAAKd,MAAMnB,SAAUkC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE1C,KAAKc,MAAQ6B,EAAE3C,KAAKc,MAAQ,GAAK,KAC3F,EAAKkB,SAAL,2BACO,EAAKN,OADZ,IAEInB,QAASiC,M,kEArBbI,KAAKhB,Y,+BA0BL,OACI,oCACI,6BACI,kBAAC,EAAD,CACI7B,OAAQ6C,KAAKlB,MAAM3B,OACnBF,kBAAmB+C,KAAK/C,oBAE5B,kBAAC,EAAD,CAAYU,QAAUqC,KAAKlB,MAAMnB,QAASR,OAAU6C,KAAKlB,MAAM3B,OAAQO,UAAYsC,KAAKtC,UAAWqB,MAAQiB,KAAKlB,MAAMC,c,GAzC/GkB,aCEZC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.3310d933.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    search: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=100\")\r\n    }\r\n};","import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"search\">Search:</label>\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.search}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search for an employee\"\r\n          id=\"search\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\n\r\n\r\nfunction ResultList(props) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          <th onClick = {()=> props.nameArray()}>Name</th>\r\n          <th>Phone Number</th>\r\n          <th>Email</th>\r\n          <th>Date of Birth</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody className=\"list-group\">\r\n        {props.results.map(({name, phone, email, dob, login, picture}) => {\r\n          if(name.first.toLowerCase().includes(props.search)){\r\n          return (\r\n          <tr className=\"list-group-item\" key={login.uuid}>\r\n            <td>\r\n              <img src={picture.thumbnail} alt=\"\"/>\r\n            </td>\r\n            <td>\r\n              {name.first} {name.last}\r\n            </td>\r\n            <td>\r\n              {phone}\r\n            </td>\r\n            <td>\r\n              {email}\r\n            </td>\r\n            <td>\r\n              {dob.date.slice(0, 10)}\r\n            </td>\r\n          </tr>\r\n        )}}\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default ResultList;\r\n","import React, {Component} from \"react\";\r\nimport API from \"../utils/API\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport ResultList from \"./ResultList\";\r\n \r\n\r\nclass GenerateList extends Component{\r\n    state = {\r\n        search: \"\",\r\n        results: [],\r\n        order: \"descend\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.apiCall();\r\n    };\r\n\r\n    apiCall = () => {\r\n        API.search()\r\n          .then(res => this.setState({ results: res.data.results }))\r\n          .catch(err => console.log(err));\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        const search = event.target.name;\r\n        const value = event.target.value;\r\n        this.setState({\r\n        [search]: value\r\n        });\r\n    };\r\n\r\n    nameArray = ()=> {\r\n        const sorted = [ ...this.state.results ].sort((a, b) => a.name.first > b.name.first ? 1 : -1)\r\n        this.setState({\r\n            ...this.state,\r\n            results: sorted\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <SearchForm\r\n                        search={this.state.search}\r\n                        handleInputChange={this.handleInputChange}\r\n                    />\r\n                    <ResultList results= {this.state.results} search = {this.state.search} nameArray= {this.nameArray} order= {this.state.order}/>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GenerateList;","import React from 'react';\nimport './App.css';\nimport GenerateList from \"./components/GenerateList\"\n\nfunction App() {\n  return <GenerateList />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}